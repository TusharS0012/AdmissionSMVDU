// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["windows"]
  output        = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StudentApplication {
  applicationNumber String  @id
  studentName       String
  fatherMotherName  String
  phoneNumber       String
  email             String
  jeeCRL            Int
  category          String
  categoryRank      Int?
  subCategory       String?
  subCategoryRank   Int?

  courseChoice1 String
  courseChoice2 String?
  courseChoice3 String?
  courseChoice4 String?
  courseChoice5 String?
  courseChoice6 String?
  courseChoice7 String?
  sportsMarks   Float?

  createdAt   DateTime        @default(now())
  allocations AllocatedSeat[]
}

model Department {
  id                 String               @id
  name               String
  seatMatrix         SeatMatrix[]
  originalSeatMatrix OriginalSeatMatrix[]
}

model SeatMatrix {
  id           Int        @id @default(autoincrement())
  departmentId String
  category     String
  subCategory  String
  totalSeats   Int
  department   Department @relation(fields: [departmentId], references: [id])

  @@unique([departmentId, category, subCategory], name: "departmentId_category_subCategory")
}
model AllocatedSeat {
  id                    Int                @id @default(autoincrement())
  studentId             String
  allocatedCourse       String
  allocationRound       Int
  preferenceNumber      Int                // New: Which preference was allocated (1â€“7)
  status                AllocationStatus   @default(PENDING) // LOCK / FLOAT / PENDING
  allocatedAt           DateTime           @default(now())

  student               StudentApplication @relation(fields: [studentId], references: [applicationNumber])
}

enum AllocationStatus {
  LOCK
  FLOAT
  PENDING
}

model OriginalSeatMatrix {
  id           Int    @id @default(autoincrement())
  departmentId String
  category     String
  subCategory  String
  totalSeats   Int

  department Department @relation(fields: [departmentId], references: [id])

  @@unique([departmentId, category, subCategory], name: "original_department_category_subCategory")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  subCategories SubCategory[]
}

model SubCategory {
  id          Int      @id @default(autoincrement())
  name        String
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])

  @@unique([categoryId, name])
}
